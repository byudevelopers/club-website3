{"version":3,"sources":["assets/contributors.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API","concat","contributors","require","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","items","_this2","fetch","then","response","json","data","batchRowValues","valueRanges","values","rows","i","length","rowObject","j","push","setState","console","log","sort","itemY","itemX","Date","filter","item","map","react_default","a","createElement","key","Presenter","Company","Description","className","lib","bordered","hoverable","responsive","data-field","href","large","node","waves","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wJAIAA,EAAOC,QAFY,uKCIbC,EAAG,iDAAAC,OADC,+CACD,2DAAAA,OAFA,2CAGHC,EAAeC,EAAQ,IAwFdC,cArFb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACXC,MAAO,IAJGR,mFAQM,IAAAS,EAAAN,KAClBO,MAAMf,GACHgB,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAIJ,IAHA,IAAIC,EAAiBD,EAAKE,YAAY,GAAGC,OAEnCC,EAAO,GACJC,EAAI,EAAGA,EAAIJ,EAAeK,OAAQD,IAAK,CAE9C,IADA,IAAIE,EAAY,GACPC,EAAI,EAAGA,EAAIP,EAAeI,GAAGC,OAAQE,IAC5CD,EAAUN,EAAe,GAAGO,IAAMP,EAAeI,GAAGG,GAEtDJ,EAAKK,KAAKF,GAGZZ,EAAKe,SAAS,CAAEhB,MAAOU,IAEvBO,QAAQC,IAAIjB,EAAKF,MAAMC,OACvBiB,QAAQC,IAAI7B,sCAMhB,IAAMW,EAAQL,KAAKI,MAAMC,MACtBmB,KAAK,SAACC,EAAOC,GAIZ,OAFAA,EAAQ,IAAIC,KAAKD,EAAMC,QACvBF,EAAQ,IAAIE,KAAKF,EAAME,QACC,EAAID,EAAQD,EAAQ,EAAI,IAEjDG,OAAO,SAAAC,GAEN,GAAI,IAAIF,KAAKE,EAAKF,MAAQ,IAAIA,KAC5B,OAAOE,IAGVC,IAAI,SACHD,EACAb,GAFG,OAIHe,EAAAC,EAAAC,cAAA,MAAIC,IAAKlB,GACPe,EAAAC,EAAAC,cAAA,UAAKJ,EAAKM,WACVJ,EAAAC,EAAAC,cAAA,UAAKJ,EAAKO,SACVL,EAAAC,EAAAC,cAAA,UAAKJ,EAAKQ,aACVN,EAAAC,EAAAC,cAAA,UAAKJ,EAAKF,SAIhB,OACEI,EAAAC,EAAAC,cAAA,OAAKK,UAAW,SACdP,EAAAC,EAAAC,cAAA,0CACAF,EAAAC,EAAAC,cAACM,EAAA,MAAD,CAAOC,UAAQ,EAACC,WAAS,EAACC,YAAU,GAClCX,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIU,aAAW,MAAf,aACAZ,EAAAC,EAAAC,cAAA,MAAIU,aAAW,MAAf,WACAZ,EAAAC,EAAAC,cAAA,MAAIU,aAAW,SAAf,eACAZ,EAAAC,EAAAC,cAAA,MAAIU,aAAW,SAAf,UAGJZ,EAAAC,EAAAC,cAAA,aAAQ5B,IAEV0B,EAAAC,EAAAC,cAACM,EAAA,OAAD,CACEK,KAAK,qBACLC,OAAK,EACLC,KAAK,IACLR,UAAU,cACVS,MAAM,SALR,gBAxEUC,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,KAAK,SAAAsD,GACjCA,EAAaC","file":"static/js/main.fbab9430.chunk.js","sourcesContent":["// if you contributed to this project, please add your name below:\n\nlet contributors = \"created by:\" + \"\\nTrevor Lane\";\n\nmodule.exports = contributors;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Table, Button } from \"react-materialize\";\n\nconst key = `AIzaSyBhoqx72yFN_cuZPr_QOzp381Fdy9rawSk`;\nconst link = `1Z--Fc487YWBpSuJRt2Nq-7wx14XAaZFWfFUbByBoSVY`;\nconst API = `https://sheets.googleapis.com/v4/spreadsheets/${link}/values:batchGet?ranges=Sheet1&majorDimension=ROWS&key=${key}`;\nconst contributors = require(\"./assets/contributors\");\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(API)\n      .then(response => response.json())\n      .then(data => {\n        let batchRowValues = data.valueRanges[0].values;\n\n        const rows = [];\n        for (let i = 1; i < batchRowValues.length; i++) {\n          let rowObject = {};\n          for (let j = 0; j < batchRowValues[i].length; j++) {\n            rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n          }\n          rows.push(rowObject);\n        }\n\n        this.setState({ items: rows });\n        // ---  dont remove ----\n        console.log(this.state.items);\n        console.log(contributors);\n        // --------------------\n      });\n  }\n\n  render() {\n    const items = this.state.items\n      .sort((itemY, itemX) => {\n        // sorts events by date, earliest event comes first\n        itemX = new Date(itemX.Date);\n        itemY = new Date(itemY.Date);\n        return itemX > itemY ? -1 : itemX < itemY ? 1 : 0;\n      })\n      .filter(item => {\n        // filters out past events\n        if (new Date(item.Date) > new Date()) {\n          return item;\n        }\n      })\n      .map((\n        item,\n        i // build table row\n      ) => (\n        <tr key={i}>\n          <td>{item.Presenter}</td>\n          <td>{item.Company}</td>\n          <td>{item.Description}</td>\n          <td>{item.Date}</td>\n        </tr>\n      ));\n\n    return (\n      <div className={\"block\"}>\n        <h3>BYU Dev Club Upcoming Events</h3>\n        <Table bordered hoverable responsive>\n          <thead>\n            <tr>\n              <th data-field=\"id\">Presenter</th>\n              <th data-field=\"id\">Company</th>\n              <th data-field=\"price\">Description</th>\n              <th data-field=\"price\">Date</th>\n            </tr>\n          </thead>\n          <tbody>{items}</tbody>\n        </Table>\n        <Button\n          href=\"http://dev.byu.edu\"\n          large\n          node=\"a\"\n          className=\"back_button\"\n          waves=\"light\"\n        >\n          Back\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}